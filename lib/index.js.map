{"version":3,"sources":["index.js"],"names":["cx","AutoComplete","props","context","rowHasChanged","getRowData","value","state","open","closing","dataSource","DataSource","onChange","bind","onFocus","renderLayer","onClickAway","componentDidMount","window","addEventListener","componentDidUpdate","main","layerWidth","clientWidth","layer","mainArchor","layerArchor","points","overflow","adjustX","adjustY","componentWillReceiveProps","nextProps","Array","isArray","cloneWithRows","componentWillUnmount","removeEventListener","e","contains","target","setState","onUpdate","promise","Promise","resolve","then","newState","data","length","renderLayerContent","renderRow","getRowKey","getRowValue","getPartClassName","args","begin","end","className","size","part","build","opacity","scale","stiffness","damping","WebkitTransform","MozTransform","msTransform","transform","width","render","textboxProps","archor","oneOf","displayName","defaultProps","rowData","index","total","propTypes","oneOfType","func","array"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file AutoComplete\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\n\nimport {create} from 'melon-core/classname/cxBuilder';\nimport TextBox from 'melon/TextBox';\nimport Layer from 'melon-layer';\nimport ListView from 'melon-listview';\nimport align from 'dom-align';\n\nimport {\n    Motion,\n    spring\n} from 'react-motion';\n\nimport omit from 'lodash/omit';\n\nconst cx = create('AutoComplete');\n\n/**\n * Melon AutoComplete\n *\n * @class\n * @extends React.Component\n */\nexport default class AutoComplete extends Component {\n\n    constructor(props, context) {\n\n        super(props, context);\n\n        const {\n            rowHasChanged,\n            getRowData,\n            value\n        } = props;\n\n        this.state = {\n            open: false,\n            closing: false,\n            value,\n            dataSource: new ListView.DataSource({\n                rowHasChanged,\n                getRowData\n            })\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.renderLayer = this.renderLayer.bind(this);\n        this.onClickAway = this.onClickAway.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('click', this.onClickAway);\n    }\n\n    componentDidUpdate() {\n\n        if (this.state.open && this.main) {\n\n            this.layerWidth = `${this.main.clientWidth}px`;\n\n            if (!this.layer) {\n                return;\n            }\n\n            let {\n                mainArchor,\n                layerArchor\n            } = this.props;\n\n            align(\n                this.layer,\n                this.main,\n                {\n                    points: [layerArchor, mainArchor],\n                    overflow: {\n                        adjustX: true,\n                        adjustY: true\n                    }\n                }\n            );\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (Array.isArray(nextProps.dataSource)) {\n            this.state.dataSource.cloneWithRows(nextProps.dataSource);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.onClickAway);\n    }\n\n    onClickAway(e) {\n        if (this.state.open && this.main && this.layer\n            && !this.layer.contains(e.target)\n            && !this.main.contains(e.target)\n        ) {\n            this.setState({closing: true});\n        }\n    }\n\n    onFocus(e) {\n\n        const onFocus = this.props.onFocus;\n\n        if (onFocus) {\n            onFocus(e);\n        }\n\n        this.onUpdate({\n            value: e.target.state.value\n        });\n    }\n\n    onUpdate(e) {\n\n        const value = e.value;\n        const dataSource = this.props.dataSource;\n\n        const promise = Array.isArray(dataSource)\n            ? Promise.resolve(dataSource)\n            : dataSource(value);\n\n        this.setState({value});\n\n        promise.then(data => {\n\n            const newState = {\n                dataSource: this.state.dataSource.cloneWithRows(data)\n            };\n\n            if (data.length <= 0 && this.state.open) {\n                newState.closing = true;\n            }\n            else if (data.length > 0) {\n                newState.open = true;\n            }\n\n            this.setState(newState);\n        });\n    }\n\n    onChange(e) {\n\n        const onChange = this.props.onChange;\n\n        if (onChange) {\n            onChange(e);\n        }\n\n        this.onUpdate({value: e.value});\n    }\n\n    renderLayerContent() {\n\n        const {\n            renderRow,\n            getRowKey,\n            getRowValue\n        } = this.props;\n\n        return (\n            <ListView\n                className={cx.getPartClassName('list')}\n                dataSource={this.state.dataSource}\n                renderRow={(...args) =>\n                    <div\n                        onClick={() => {\n                            this.setState({\n                                value: getRowValue(...args),\n                                closing: true\n                            });\n                        }}\n                        key={getRowKey(...args)}\n                        className={cx.getPartClassName('list-item')}>\n                        {renderRow(...args)}\n                    </div>\n                }/>\n        );\n    }\n\n    renderLayer() {\n\n        let {open, closing} = this.state;\n        let begin = open && !closing ? 0 : 1;\n        let end = open && !closing ? 1 : 0;\n\n        const className = cx({size: this.props.size}).part('popup').build();\n\n        return (\n            <Motion\n                defaultStyle={{\n                    opacity: begin,\n                    scale: begin\n                }}\n                style={{\n                    opacity: spring(end),\n                    scale: spring(end, {stiffness: 260, damping: 20})\n                }}\n                onRest={() => {\n                    if (open && closing) {\n                        this.setState({open: false, closing: false});\n                    }\n                }}>\n                {({scale, opacity}) => (\n                    <div\n                        className={className}\n                        style={{\n                            opacity: opacity,\n                            WebkitTransform: `scale(1, ${scale})`,\n                            MozTransform: `scale(1, ${scale})`,\n                            msTransform: `scale(1, ${scale})`,\n                            transform: `scale(1, ${scale})`,\n                            width: this.layerWidth\n                        }}\n                        ref={layer => {\n                            this.layer = layer;\n                        }}>\n                        {this.renderLayerContent()}\n                    </div>\n                )}\n            </Motion>\n        );\n\n    }\n\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const props = this.props;\n\n        const {\n            value,\n            open,\n            closing\n        } = this.state;\n\n        const textboxProps = omit(\n            props,\n            [\n                'renderRow', 'layerArchor',\n                'mainArchor', 'getRowKey',\n                'component', 'dataSource',\n                'getRowValue'\n            ]\n        );\n\n        return (\n            <div\n                className={cx(this.props).build()}\n                ref={main => {\n                    this.main = main;\n                }}>\n                <TextBox\n                    {...textboxProps}\n                    onFocus={this.onFocus}\n                    value={value}\n                    onChange={this.onChange} />\n                <Layer\n                    useLayerMask={false}\n                    open={open || closing}\n                    render={this.renderLayer} />\n            </div>\n        );\n    }\n\n}\n\nlet archor = PropTypes.oneOf([\n    'tl', 'tc', 'tr',\n    'cl', 'cc', 'cr',\n    'bl', 'bc', 'br'\n]);\n\nAutoComplete.displayName = 'AutoComplete';\n\nAutoComplete.defaultProps = {\n    ...TextBox.defaultProps,\n    ...ListView.defaultProps,\n    layerArchor: 'bl',\n    mainArchor: 'tl',\n    renderRow(rowData, index, total) {\n        return rowData;\n    },\n    getRowKey(rowData, index, total) {\n        return index;\n    },\n    getRowValue(rowData, index, total) {\n        return rowData;\n    }\n};\n\nAutoComplete.propTypes = {\n    ...AutoComplete.propTypes,\n    ...ListView.propTypes,\n    dataSource: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.array\n    ]),\n    getRowKey: PropTypes.func,\n    getRowValue: PropTypes.func,\n    layerArchor: archor,\n    mainArchor: archor\n};\n"],"sourceRoot":"/source/"}