{"version":3,"sources":["index.js"],"names":["cx","AutoComplete","props","context","rowHasChanged","getRowData","value","state","open","closing","dataSource","DataSource","onChange","bind","onFocus","renderLayer","onClickAway","componentDidMount","window","addEventListener","componentDidUpdate","main","layerWidth","clientWidth","layer","mainArchor","layerArchor","style","width","points","overflow","adjustX","adjustY","componentWillReceiveProps","nextProps","Array","isArray","setState","cloneWithRows","componentWillUnmount","removeEventListener","e","contains","target","onUpdate","promise","Promise","resolve","then","newState","data","length","renderLayerContent","renderRow","getRowKey","getRowValue","getPartClassName","args","begin","end","className","size","part","build","opacity","scale","stiffness","damping","WebkitTransform","MozTransform","msTransform","transform","render","textboxProps","archor","oneOf","displayName","defaultProps","rowData","index","total","propTypes","oneOfType","func","array"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file AutoComplete\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\n\nimport {create} from 'melon-core/classname/cxBuilder';\nimport TextBox from 'melon/TextBox';\nimport Layer from 'melon-layer';\nimport ListView from 'melon-listview';\nimport align from 'dom-align';\n\nimport {\n    Motion,\n    spring\n} from 'react-motion';\n\nimport omit from 'lodash/omit';\n\nconst cx = create('AutoComplete');\n\n/**\n * Melon AutoComplete\n *\n * @class\n * @extends React.Component\n */\nexport default class AutoComplete extends Component {\n\n    constructor(props, context) {\n\n        super(props, context);\n\n        const {\n            rowHasChanged,\n            getRowData,\n            value\n        } = props;\n\n        this.state = {\n            open: false,\n            closing: false,\n            value,\n            dataSource: new ListView.DataSource({\n                rowHasChanged,\n                getRowData\n            })\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.renderLayer = this.renderLayer.bind(this);\n        this.onClickAway = this.onClickAway.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('click', this.onClickAway);\n    }\n\n    componentDidUpdate() {\n\n        if (this.state.open && !this.state.closing && this.main) {\n\n            this.layerWidth = `${this.main.clientWidth}px`;\n\n            if (!this.layer) {\n                return;\n            }\n\n            let {\n                mainArchor,\n                layerArchor\n            } = this.props;\n\n            this.layer.style.width = this.layerWidth;\n\n            align(\n                this.layer,\n                this.main,\n                {\n                    points: [layerArchor, mainArchor],\n                    overflow: {\n                        adjustX: true,\n                        adjustY: true\n                    }\n                }\n            );\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (Array.isArray(nextProps.dataSource)) {\n            this.setState({\n                dataSource: this.state.dataSource.cloneWithRows(nextProps.dataSource)\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.onClickAway);\n    }\n\n    onClickAway(e) {\n        if (this.state.open && this.main && this.layer\n            && !this.layer.contains(e.target)\n            && !this.main.contains(e.target)\n        ) {\n            this.setState({closing: true});\n        }\n    }\n\n    onFocus(e) {\n\n        const onFocus = this.props.onFocus;\n\n        if (onFocus) {\n            onFocus(e);\n        }\n\n        this.onUpdate({\n            value: e.target.state.value\n        });\n    }\n\n    onUpdate(e) {\n\n        const value = e.value;\n        const dataSource = this.props.dataSource;\n\n        const promise = Array.isArray(dataSource)\n            ? Promise.resolve(dataSource)\n            : dataSource(value);\n\n        this.setState({value});\n\n        promise.then(data => {\n\n            const newState = {\n                dataSource: this.state.dataSource.cloneWithRows(data)\n            };\n\n            if (data.length <= 0 && this.state.open) {\n                newState.closing = true;\n            }\n            else if (data.length > 0) {\n                newState.open = true;\n            }\n\n            this.setState(newState);\n        });\n    }\n\n    onChange(e) {\n\n        const onChange = this.props.onChange;\n\n        if (onChange) {\n            onChange(e);\n        }\n\n        this.onUpdate({value: e.value});\n    }\n\n    renderLayerContent() {\n\n        const {\n            renderRow,\n            getRowKey,\n            getRowValue\n        } = this.props;\n\n        return (\n            <ListView\n                className={cx.getPartClassName('list')}\n                dataSource={this.state.dataSource}\n                renderRow={(...args) =>\n                    <div\n                        onClick={() => {\n                            this.setState({\n                                value: getRowValue(...args),\n                                closing: true\n                            });\n                        }}\n                        key={getRowKey(...args)}\n                        className={cx.getPartClassName('list-item')}>\n                        {renderRow(...args)}\n                    </div>\n                }/>\n        );\n    }\n\n    renderLayer() {\n\n        let {open, closing} = this.state;\n        let begin = open && !closing ? 0 : 1;\n        let end = open && !closing ? 1 : 0;\n\n        const className = cx({size: this.props.size}).part('popup').build();\n\n        return (\n            <Motion\n                defaultStyle={{\n                    opacity: begin,\n                    scale: begin\n                }}\n                style={{\n                    opacity: spring(end),\n                    scale: spring(end, {stiffness: 260, damping: 20})\n                }}\n                onRest={() => {\n                    if (open && closing) {\n                        this.setState({open: false, closing: false});\n                    }\n                }}>\n                {({scale, opacity}) => (\n                    <div\n                        className={className}\n                        style={{\n                            opacity: opacity,\n                            WebkitTransform: `scale(1, ${scale})`,\n                            MozTransform: `scale(1, ${scale})`,\n                            msTransform: `scale(1, ${scale})`,\n                            transform: `scale(1, ${scale})`\n                        }}\n                        ref={layer => {\n                            this.layer = layer;\n                        }}>\n                        {this.renderLayerContent()}\n                    </div>\n                )}\n            </Motion>\n        );\n\n    }\n\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const props = this.props;\n\n        const {\n            value,\n            open,\n            closing\n        } = this.state;\n\n        const textboxProps = omit(\n            props,\n            [\n                'renderRow', 'layerArchor',\n                'mainArchor', 'getRowKey',\n                'component', 'dataSource',\n                'getRowValue', 'style'\n            ]\n        );\n\n        return (\n            <div\n                style={props.style}\n                className={cx(this.props).build()}\n                ref={main => {\n                    this.main = main;\n                }}>\n                <TextBox\n                    {...textboxProps}\n                    onFocus={this.onFocus}\n                    value={value}\n                    onChange={this.onChange} />\n                <Layer\n                    useLayerMask={false}\n                    open={open || closing}\n                    render={this.renderLayer} />\n            </div>\n        );\n    }\n\n}\n\nlet archor = PropTypes.oneOf([\n    'tl', 'tc', 'tr',\n    'cl', 'cc', 'cr',\n    'bl', 'bc', 'br'\n]);\n\nAutoComplete.displayName = 'AutoComplete';\n\nAutoComplete.defaultProps = {\n    ...TextBox.defaultProps,\n    ...ListView.defaultProps,\n    layerArchor: 'tl',\n    mainArchor: 'bl',\n    renderRow(rowData, index, total) {\n        return rowData;\n    },\n    getRowKey(rowData, index, total) {\n        return index;\n    },\n    getRowValue(rowData, index, total) {\n        return rowData;\n    }\n};\n\nAutoComplete.propTypes = {\n    ...AutoComplete.propTypes,\n    ...ListView.propTypes,\n    dataSource: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.array\n    ]),\n    getRowKey: PropTypes.func,\n    getRowValue: PropTypes.func,\n    layerArchor: archor,\n    mainArchor: archor\n};\n"],"sourceRoot":"/source/"}